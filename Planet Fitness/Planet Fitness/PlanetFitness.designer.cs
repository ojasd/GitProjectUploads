#pragma warning disable 1591
//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.34014
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace Planet_Fitness
{
	using System.Data.Linq;
	using System.Data.Linq.Mapping;
	using System.Data;
	using System.Collections.Generic;
	using System.Reflection;
	using System.Linq;
	using System.Linq.Expressions;
	using System.ComponentModel;
	using System;
	
	
	[global::System.Data.Linq.Mapping.DatabaseAttribute(Name="UNCCDB_1")]
	public partial class PlanetFitnessDataContext : System.Data.Linq.DataContext
	{
		
		private static System.Data.Linq.Mapping.MappingSource mappingSource = new AttributeMappingSource();
		
    #region Extensibility Method Definitions
    partial void OnCreated();
    partial void InsertActivity(Activity instance);
    partial void UpdateActivity(Activity instance);
    partial void DeleteActivity(Activity instance);
    partial void InsertCardDetail(CardDetail instance);
    partial void UpdateCardDetail(CardDetail instance);
    partial void DeleteCardDetail(CardDetail instance);
    partial void InsertMember(Member instance);
    partial void UpdateMember(Member instance);
    partial void DeleteMember(Member instance);
    partial void InsertSlot(Slot instance);
    partial void UpdateSlot(Slot instance);
    partial void DeleteSlot(Slot instance);
    partial void InsertSlotInformation(SlotInformation instance);
    partial void UpdateSlotInformation(SlotInformation instance);
    partial void DeleteSlotInformation(SlotInformation instance);
    partial void InsertTrainer(Trainer instance);
    partial void UpdateTrainer(Trainer instance);
    partial void DeleteTrainer(Trainer instance);
    partial void InsertUserAccount(UserAccount instance);
    partial void UpdateUserAccount(UserAccount instance);
    partial void DeleteUserAccount(UserAccount instance);
    partial void InsertUserType(UserType instance);
    partial void UpdateUserType(UserType instance);
    partial void DeleteUserType(UserType instance);
    #endregion
		
		public PlanetFitnessDataContext() : 
				base(global::System.Configuration.ConfigurationManager.ConnectionStrings["UNCCDB_1ConnectionString"].ConnectionString, mappingSource)
		{
			OnCreated();
		}
		
		public PlanetFitnessDataContext(string connection) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public PlanetFitnessDataContext(System.Data.IDbConnection connection) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public PlanetFitnessDataContext(string connection, System.Data.Linq.Mapping.MappingSource mappingSource) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public PlanetFitnessDataContext(System.Data.IDbConnection connection, System.Data.Linq.Mapping.MappingSource mappingSource) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public System.Data.Linq.Table<Activity> Activities
		{
			get
			{
				return this.GetTable<Activity>();
			}
		}
		
		public System.Data.Linq.Table<CardDetail> CardDetails
		{
			get
			{
				return this.GetTable<CardDetail>();
			}
		}
		
		public System.Data.Linq.Table<Member> Members
		{
			get
			{
				return this.GetTable<Member>();
			}
		}
		
		public System.Data.Linq.Table<Slot> Slots
		{
			get
			{
				return this.GetTable<Slot>();
			}
		}
		
		public System.Data.Linq.Table<SlotInformation> SlotInformations
		{
			get
			{
				return this.GetTable<SlotInformation>();
			}
		}
		
		public System.Data.Linq.Table<Trainer> Trainers
		{
			get
			{
				return this.GetTable<Trainer>();
			}
		}
		
		public System.Data.Linq.Table<UserAccount> UserAccounts
		{
			get
			{
				return this.GetTable<UserAccount>();
			}
		}
		
		public System.Data.Linq.Table<UserType> UserTypes
		{
			get
			{
				return this.GetTable<UserType>();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Activity")]
	public partial class Activity : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _ActivityID_in;
		
		private string _Activity_vc;
		
		private EntitySet<Slot> _Slots;
		
		private EntitySet<SlotInformation> _SlotInformations;
		
		private EntitySet<Trainer> _Trainers;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnActivityID_inChanging(int value);
    partial void OnActivityID_inChanged();
    partial void OnActivity_vcChanging(string value);
    partial void OnActivity_vcChanged();
    #endregion
		
		public Activity()
		{
			this._Slots = new EntitySet<Slot>(new Action<Slot>(this.attach_Slots), new Action<Slot>(this.detach_Slots));
			this._SlotInformations = new EntitySet<SlotInformation>(new Action<SlotInformation>(this.attach_SlotInformations), new Action<SlotInformation>(this.detach_SlotInformations));
			this._Trainers = new EntitySet<Trainer>(new Action<Trainer>(this.attach_Trainers), new Action<Trainer>(this.detach_Trainers));
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ActivityID_in", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int ActivityID_in
		{
			get
			{
				return this._ActivityID_in;
			}
			set
			{
				if ((this._ActivityID_in != value))
				{
					this.OnActivityID_inChanging(value);
					this.SendPropertyChanging();
					this._ActivityID_in = value;
					this.SendPropertyChanged("ActivityID_in");
					this.OnActivityID_inChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Activity_vc", DbType="VarChar(100) NOT NULL", CanBeNull=false)]
		public string Activity_vc
		{
			get
			{
				return this._Activity_vc;
			}
			set
			{
				if ((this._Activity_vc != value))
				{
					this.OnActivity_vcChanging(value);
					this.SendPropertyChanging();
					this._Activity_vc = value;
					this.SendPropertyChanged("Activity_vc");
					this.OnActivity_vcChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Activity_Slot", Storage="_Slots", ThisKey="ActivityID_in", OtherKey="FK_Activity_Slot_in")]
		public EntitySet<Slot> Slots
		{
			get
			{
				return this._Slots;
			}
			set
			{
				this._Slots.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Activity_SlotInformation", Storage="_SlotInformations", ThisKey="ActivityID_in", OtherKey="FK_Activity_SlotInformation_in")]
		public EntitySet<SlotInformation> SlotInformations
		{
			get
			{
				return this._SlotInformations;
			}
			set
			{
				this._SlotInformations.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Activity_Trainer", Storage="_Trainers", ThisKey="ActivityID_in", OtherKey="FK_Activity_Trainer_in")]
		public EntitySet<Trainer> Trainers
		{
			get
			{
				return this._Trainers;
			}
			set
			{
				this._Trainers.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_Slots(Slot entity)
		{
			this.SendPropertyChanging();
			entity.Activity = this;
		}
		
		private void detach_Slots(Slot entity)
		{
			this.SendPropertyChanging();
			entity.Activity = null;
		}
		
		private void attach_SlotInformations(SlotInformation entity)
		{
			this.SendPropertyChanging();
			entity.Activity = this;
		}
		
		private void detach_SlotInformations(SlotInformation entity)
		{
			this.SendPropertyChanging();
			entity.Activity = null;
		}
		
		private void attach_Trainers(Trainer entity)
		{
			this.SendPropertyChanging();
			entity.Activity = this;
		}
		
		private void detach_Trainers(Trainer entity)
		{
			this.SendPropertyChanging();
			entity.Activity = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.CardDetails")]
	public partial class CardDetail : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _CardDetailsID_in;
		
		private int _FK_Member_CardDetails_in;
		
		private long _CardNo_in;
		
		private string _ExpDate_vc;
		
		private string _CardAliasName_vc;
		
		private EntityRef<Member> _Member;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnCardDetailsID_inChanging(int value);
    partial void OnCardDetailsID_inChanged();
    partial void OnFK_Member_CardDetails_inChanging(int value);
    partial void OnFK_Member_CardDetails_inChanged();
    partial void OnCardNo_inChanging(long value);
    partial void OnCardNo_inChanged();
    partial void OnExpDate_vcChanging(string value);
    partial void OnExpDate_vcChanged();
    partial void OnCardAliasName_vcChanging(string value);
    partial void OnCardAliasName_vcChanged();
    #endregion
		
		public CardDetail()
		{
			this._Member = default(EntityRef<Member>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_CardDetailsID_in", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int CardDetailsID_in
		{
			get
			{
				return this._CardDetailsID_in;
			}
			set
			{
				if ((this._CardDetailsID_in != value))
				{
					this.OnCardDetailsID_inChanging(value);
					this.SendPropertyChanging();
					this._CardDetailsID_in = value;
					this.SendPropertyChanged("CardDetailsID_in");
					this.OnCardDetailsID_inChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_FK_Member_CardDetails_in", DbType="Int NOT NULL")]
		public int FK_Member_CardDetails_in
		{
			get
			{
				return this._FK_Member_CardDetails_in;
			}
			set
			{
				if ((this._FK_Member_CardDetails_in != value))
				{
					if (this._Member.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnFK_Member_CardDetails_inChanging(value);
					this.SendPropertyChanging();
					this._FK_Member_CardDetails_in = value;
					this.SendPropertyChanged("FK_Member_CardDetails_in");
					this.OnFK_Member_CardDetails_inChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_CardNo_in", DbType="BigInt NOT NULL")]
		public long CardNo_in
		{
			get
			{
				return this._CardNo_in;
			}
			set
			{
				if ((this._CardNo_in != value))
				{
					this.OnCardNo_inChanging(value);
					this.SendPropertyChanging();
					this._CardNo_in = value;
					this.SendPropertyChanged("CardNo_in");
					this.OnCardNo_inChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ExpDate_vc", DbType="VarChar(50) NOT NULL", CanBeNull=false)]
		public string ExpDate_vc
		{
			get
			{
				return this._ExpDate_vc;
			}
			set
			{
				if ((this._ExpDate_vc != value))
				{
					this.OnExpDate_vcChanging(value);
					this.SendPropertyChanging();
					this._ExpDate_vc = value;
					this.SendPropertyChanged("ExpDate_vc");
					this.OnExpDate_vcChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_CardAliasName_vc", DbType="VarChar(100) NOT NULL", CanBeNull=false)]
		public string CardAliasName_vc
		{
			get
			{
				return this._CardAliasName_vc;
			}
			set
			{
				if ((this._CardAliasName_vc != value))
				{
					this.OnCardAliasName_vcChanging(value);
					this.SendPropertyChanging();
					this._CardAliasName_vc = value;
					this.SendPropertyChanged("CardAliasName_vc");
					this.OnCardAliasName_vcChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Member_CardDetail", Storage="_Member", ThisKey="FK_Member_CardDetails_in", OtherKey="MemberID_in", IsForeignKey=true)]
		public Member Member
		{
			get
			{
				return this._Member.Entity;
			}
			set
			{
				Member previousValue = this._Member.Entity;
				if (((previousValue != value) 
							|| (this._Member.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Member.Entity = null;
						previousValue.CardDetails.Remove(this);
					}
					this._Member.Entity = value;
					if ((value != null))
					{
						value.CardDetails.Add(this);
						this._FK_Member_CardDetails_in = value.MemberID_in;
					}
					else
					{
						this._FK_Member_CardDetails_in = default(int);
					}
					this.SendPropertyChanged("Member");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Member")]
	public partial class Member : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _MemberID_in;
		
		private decimal _BillAmount_de;
		
		private System.Nullable<int> _FK_UserAccount_Member_in;
		
		private EntitySet<CardDetail> _CardDetails;
		
		private EntitySet<SlotInformation> _SlotInformations;
		
		private EntityRef<UserAccount> _UserAccount;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnMemberID_inChanging(int value);
    partial void OnMemberID_inChanged();
    partial void OnBillAmount_deChanging(decimal value);
    partial void OnBillAmount_deChanged();
    partial void OnFK_UserAccount_Member_inChanging(System.Nullable<int> value);
    partial void OnFK_UserAccount_Member_inChanged();
    #endregion
		
		public Member()
		{
			this._CardDetails = new EntitySet<CardDetail>(new Action<CardDetail>(this.attach_CardDetails), new Action<CardDetail>(this.detach_CardDetails));
			this._SlotInformations = new EntitySet<SlotInformation>(new Action<SlotInformation>(this.attach_SlotInformations), new Action<SlotInformation>(this.detach_SlotInformations));
			this._UserAccount = default(EntityRef<UserAccount>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_MemberID_in", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int MemberID_in
		{
			get
			{
				return this._MemberID_in;
			}
			set
			{
				if ((this._MemberID_in != value))
				{
					this.OnMemberID_inChanging(value);
					this.SendPropertyChanging();
					this._MemberID_in = value;
					this.SendPropertyChanged("MemberID_in");
					this.OnMemberID_inChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_BillAmount_de", DbType="Decimal(8,2) NOT NULL")]
		public decimal BillAmount_de
		{
			get
			{
				return this._BillAmount_de;
			}
			set
			{
				if ((this._BillAmount_de != value))
				{
					this.OnBillAmount_deChanging(value);
					this.SendPropertyChanging();
					this._BillAmount_de = value;
					this.SendPropertyChanged("BillAmount_de");
					this.OnBillAmount_deChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_FK_UserAccount_Member_in", DbType="Int")]
		public System.Nullable<int> FK_UserAccount_Member_in
		{
			get
			{
				return this._FK_UserAccount_Member_in;
			}
			set
			{
				if ((this._FK_UserAccount_Member_in != value))
				{
					if (this._UserAccount.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnFK_UserAccount_Member_inChanging(value);
					this.SendPropertyChanging();
					this._FK_UserAccount_Member_in = value;
					this.SendPropertyChanged("FK_UserAccount_Member_in");
					this.OnFK_UserAccount_Member_inChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Member_CardDetail", Storage="_CardDetails", ThisKey="MemberID_in", OtherKey="FK_Member_CardDetails_in")]
		public EntitySet<CardDetail> CardDetails
		{
			get
			{
				return this._CardDetails;
			}
			set
			{
				this._CardDetails.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Member_SlotInformation", Storage="_SlotInformations", ThisKey="MemberID_in", OtherKey="FK_Member_SlotInformation_in")]
		public EntitySet<SlotInformation> SlotInformations
		{
			get
			{
				return this._SlotInformations;
			}
			set
			{
				this._SlotInformations.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="UserAccount_Member", Storage="_UserAccount", ThisKey="FK_UserAccount_Member_in", OtherKey="UserAccountID_in", IsForeignKey=true)]
		public UserAccount UserAccount
		{
			get
			{
				return this._UserAccount.Entity;
			}
			set
			{
				UserAccount previousValue = this._UserAccount.Entity;
				if (((previousValue != value) 
							|| (this._UserAccount.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._UserAccount.Entity = null;
						previousValue.Members.Remove(this);
					}
					this._UserAccount.Entity = value;
					if ((value != null))
					{
						value.Members.Add(this);
						this._FK_UserAccount_Member_in = value.UserAccountID_in;
					}
					else
					{
						this._FK_UserAccount_Member_in = default(Nullable<int>);
					}
					this.SendPropertyChanged("UserAccount");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_CardDetails(CardDetail entity)
		{
			this.SendPropertyChanging();
			entity.Member = this;
		}
		
		private void detach_CardDetails(CardDetail entity)
		{
			this.SendPropertyChanging();
			entity.Member = null;
		}
		
		private void attach_SlotInformations(SlotInformation entity)
		{
			this.SendPropertyChanging();
			entity.Member = this;
		}
		
		private void detach_SlotInformations(SlotInformation entity)
		{
			this.SendPropertyChanging();
			entity.Member = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Slot")]
	public partial class Slot : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _SlotID_in;
		
		private int _FK_Activity_Slot_in;
		
		private string _StartTime_vc;
		
		private string _EndTime_vc;
		
		private int _NumberOfSlots_in;
		
		private int _AvailableSlots_in;
		
		private int _FK_Trainer_Slot_in;
		
		private EntitySet<SlotInformation> _SlotInformations;
		
		private EntityRef<Activity> _Activity;
		
		private EntityRef<Trainer> _Trainer;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnSlotID_inChanging(int value);
    partial void OnSlotID_inChanged();
    partial void OnFK_Activity_Slot_inChanging(int value);
    partial void OnFK_Activity_Slot_inChanged();
    partial void OnStartTime_vcChanging(string value);
    partial void OnStartTime_vcChanged();
    partial void OnEndTime_vcChanging(string value);
    partial void OnEndTime_vcChanged();
    partial void OnNumberOfSlots_inChanging(int value);
    partial void OnNumberOfSlots_inChanged();
    partial void OnAvailableSlots_inChanging(int value);
    partial void OnAvailableSlots_inChanged();
    partial void OnFK_Trainer_Slot_inChanging(int value);
    partial void OnFK_Trainer_Slot_inChanged();
    #endregion
		
		public Slot()
		{
			this._SlotInformations = new EntitySet<SlotInformation>(new Action<SlotInformation>(this.attach_SlotInformations), new Action<SlotInformation>(this.detach_SlotInformations));
			this._Activity = default(EntityRef<Activity>);
			this._Trainer = default(EntityRef<Trainer>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_SlotID_in", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int SlotID_in
		{
			get
			{
				return this._SlotID_in;
			}
			set
			{
				if ((this._SlotID_in != value))
				{
					this.OnSlotID_inChanging(value);
					this.SendPropertyChanging();
					this._SlotID_in = value;
					this.SendPropertyChanged("SlotID_in");
					this.OnSlotID_inChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_FK_Activity_Slot_in", DbType="Int NOT NULL")]
		public int FK_Activity_Slot_in
		{
			get
			{
				return this._FK_Activity_Slot_in;
			}
			set
			{
				if ((this._FK_Activity_Slot_in != value))
				{
					if (this._Activity.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnFK_Activity_Slot_inChanging(value);
					this.SendPropertyChanging();
					this._FK_Activity_Slot_in = value;
					this.SendPropertyChanged("FK_Activity_Slot_in");
					this.OnFK_Activity_Slot_inChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_StartTime_vc", DbType="VarChar(20) NOT NULL", CanBeNull=false)]
		public string StartTime_vc
		{
			get
			{
				return this._StartTime_vc;
			}
			set
			{
				if ((this._StartTime_vc != value))
				{
					this.OnStartTime_vcChanging(value);
					this.SendPropertyChanging();
					this._StartTime_vc = value;
					this.SendPropertyChanged("StartTime_vc");
					this.OnStartTime_vcChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_EndTime_vc", DbType="VarChar(20) NOT NULL", CanBeNull=false)]
		public string EndTime_vc
		{
			get
			{
				return this._EndTime_vc;
			}
			set
			{
				if ((this._EndTime_vc != value))
				{
					this.OnEndTime_vcChanging(value);
					this.SendPropertyChanging();
					this._EndTime_vc = value;
					this.SendPropertyChanged("EndTime_vc");
					this.OnEndTime_vcChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_NumberOfSlots_in", DbType="Int NOT NULL")]
		public int NumberOfSlots_in
		{
			get
			{
				return this._NumberOfSlots_in;
			}
			set
			{
				if ((this._NumberOfSlots_in != value))
				{
					this.OnNumberOfSlots_inChanging(value);
					this.SendPropertyChanging();
					this._NumberOfSlots_in = value;
					this.SendPropertyChanged("NumberOfSlots_in");
					this.OnNumberOfSlots_inChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_AvailableSlots_in", DbType="Int NOT NULL")]
		public int AvailableSlots_in
		{
			get
			{
				return this._AvailableSlots_in;
			}
			set
			{
				if ((this._AvailableSlots_in != value))
				{
					this.OnAvailableSlots_inChanging(value);
					this.SendPropertyChanging();
					this._AvailableSlots_in = value;
					this.SendPropertyChanged("AvailableSlots_in");
					this.OnAvailableSlots_inChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_FK_Trainer_Slot_in", DbType="Int NOT NULL")]
		public int FK_Trainer_Slot_in
		{
			get
			{
				return this._FK_Trainer_Slot_in;
			}
			set
			{
				if ((this._FK_Trainer_Slot_in != value))
				{
					if (this._Trainer.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnFK_Trainer_Slot_inChanging(value);
					this.SendPropertyChanging();
					this._FK_Trainer_Slot_in = value;
					this.SendPropertyChanged("FK_Trainer_Slot_in");
					this.OnFK_Trainer_Slot_inChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Slot_SlotInformation", Storage="_SlotInformations", ThisKey="SlotID_in", OtherKey="FK_Slot_SlotInformation_in")]
		public EntitySet<SlotInformation> SlotInformations
		{
			get
			{
				return this._SlotInformations;
			}
			set
			{
				this._SlotInformations.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Activity_Slot", Storage="_Activity", ThisKey="FK_Activity_Slot_in", OtherKey="ActivityID_in", IsForeignKey=true)]
		public Activity Activity
		{
			get
			{
				return this._Activity.Entity;
			}
			set
			{
				Activity previousValue = this._Activity.Entity;
				if (((previousValue != value) 
							|| (this._Activity.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Activity.Entity = null;
						previousValue.Slots.Remove(this);
					}
					this._Activity.Entity = value;
					if ((value != null))
					{
						value.Slots.Add(this);
						this._FK_Activity_Slot_in = value.ActivityID_in;
					}
					else
					{
						this._FK_Activity_Slot_in = default(int);
					}
					this.SendPropertyChanged("Activity");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Trainer_Slot", Storage="_Trainer", ThisKey="FK_Trainer_Slot_in", OtherKey="TrainerID_in", IsForeignKey=true)]
		public Trainer Trainer
		{
			get
			{
				return this._Trainer.Entity;
			}
			set
			{
				Trainer previousValue = this._Trainer.Entity;
				if (((previousValue != value) 
							|| (this._Trainer.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Trainer.Entity = null;
						previousValue.Slots.Remove(this);
					}
					this._Trainer.Entity = value;
					if ((value != null))
					{
						value.Slots.Add(this);
						this._FK_Trainer_Slot_in = value.TrainerID_in;
					}
					else
					{
						this._FK_Trainer_Slot_in = default(int);
					}
					this.SendPropertyChanged("Trainer");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_SlotInformations(SlotInformation entity)
		{
			this.SendPropertyChanging();
			entity.Slot = this;
		}
		
		private void detach_SlotInformations(SlotInformation entity)
		{
			this.SendPropertyChanging();
			entity.Slot = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.SlotInformation")]
	public partial class SlotInformation : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _SlotInformationID_in;
		
		private int _FK_Slot_SlotInformation_in;
		
		private int _FK_Activity_SlotInformation_in;
		
		private int _FK_Member_SlotInformation_in;
		
		private EntityRef<Activity> _Activity;
		
		private EntityRef<Member> _Member;
		
		private EntityRef<Slot> _Slot;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnSlotInformationID_inChanging(int value);
    partial void OnSlotInformationID_inChanged();
    partial void OnFK_Slot_SlotInformation_inChanging(int value);
    partial void OnFK_Slot_SlotInformation_inChanged();
    partial void OnFK_Activity_SlotInformation_inChanging(int value);
    partial void OnFK_Activity_SlotInformation_inChanged();
    partial void OnFK_Member_SlotInformation_inChanging(int value);
    partial void OnFK_Member_SlotInformation_inChanged();
    #endregion
		
		public SlotInformation()
		{
			this._Activity = default(EntityRef<Activity>);
			this._Member = default(EntityRef<Member>);
			this._Slot = default(EntityRef<Slot>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_SlotInformationID_in", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int SlotInformationID_in
		{
			get
			{
				return this._SlotInformationID_in;
			}
			set
			{
				if ((this._SlotInformationID_in != value))
				{
					this.OnSlotInformationID_inChanging(value);
					this.SendPropertyChanging();
					this._SlotInformationID_in = value;
					this.SendPropertyChanged("SlotInformationID_in");
					this.OnSlotInformationID_inChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_FK_Slot_SlotInformation_in", DbType="Int NOT NULL")]
		public int FK_Slot_SlotInformation_in
		{
			get
			{
				return this._FK_Slot_SlotInformation_in;
			}
			set
			{
				if ((this._FK_Slot_SlotInformation_in != value))
				{
					if (this._Slot.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnFK_Slot_SlotInformation_inChanging(value);
					this.SendPropertyChanging();
					this._FK_Slot_SlotInformation_in = value;
					this.SendPropertyChanged("FK_Slot_SlotInformation_in");
					this.OnFK_Slot_SlotInformation_inChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_FK_Activity_SlotInformation_in", DbType="Int NOT NULL")]
		public int FK_Activity_SlotInformation_in
		{
			get
			{
				return this._FK_Activity_SlotInformation_in;
			}
			set
			{
				if ((this._FK_Activity_SlotInformation_in != value))
				{
					if (this._Activity.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnFK_Activity_SlotInformation_inChanging(value);
					this.SendPropertyChanging();
					this._FK_Activity_SlotInformation_in = value;
					this.SendPropertyChanged("FK_Activity_SlotInformation_in");
					this.OnFK_Activity_SlotInformation_inChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_FK_Member_SlotInformation_in", DbType="Int NOT NULL")]
		public int FK_Member_SlotInformation_in
		{
			get
			{
				return this._FK_Member_SlotInformation_in;
			}
			set
			{
				if ((this._FK_Member_SlotInformation_in != value))
				{
					if (this._Member.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnFK_Member_SlotInformation_inChanging(value);
					this.SendPropertyChanging();
					this._FK_Member_SlotInformation_in = value;
					this.SendPropertyChanged("FK_Member_SlotInformation_in");
					this.OnFK_Member_SlotInformation_inChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Activity_SlotInformation", Storage="_Activity", ThisKey="FK_Activity_SlotInformation_in", OtherKey="ActivityID_in", IsForeignKey=true)]
		public Activity Activity
		{
			get
			{
				return this._Activity.Entity;
			}
			set
			{
				Activity previousValue = this._Activity.Entity;
				if (((previousValue != value) 
							|| (this._Activity.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Activity.Entity = null;
						previousValue.SlotInformations.Remove(this);
					}
					this._Activity.Entity = value;
					if ((value != null))
					{
						value.SlotInformations.Add(this);
						this._FK_Activity_SlotInformation_in = value.ActivityID_in;
					}
					else
					{
						this._FK_Activity_SlotInformation_in = default(int);
					}
					this.SendPropertyChanged("Activity");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Member_SlotInformation", Storage="_Member", ThisKey="FK_Member_SlotInformation_in", OtherKey="MemberID_in", IsForeignKey=true)]
		public Member Member
		{
			get
			{
				return this._Member.Entity;
			}
			set
			{
				Member previousValue = this._Member.Entity;
				if (((previousValue != value) 
							|| (this._Member.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Member.Entity = null;
						previousValue.SlotInformations.Remove(this);
					}
					this._Member.Entity = value;
					if ((value != null))
					{
						value.SlotInformations.Add(this);
						this._FK_Member_SlotInformation_in = value.MemberID_in;
					}
					else
					{
						this._FK_Member_SlotInformation_in = default(int);
					}
					this.SendPropertyChanged("Member");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Slot_SlotInformation", Storage="_Slot", ThisKey="FK_Slot_SlotInformation_in", OtherKey="SlotID_in", IsForeignKey=true)]
		public Slot Slot
		{
			get
			{
				return this._Slot.Entity;
			}
			set
			{
				Slot previousValue = this._Slot.Entity;
				if (((previousValue != value) 
							|| (this._Slot.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Slot.Entity = null;
						previousValue.SlotInformations.Remove(this);
					}
					this._Slot.Entity = value;
					if ((value != null))
					{
						value.SlotInformations.Add(this);
						this._FK_Slot_SlotInformation_in = value.SlotID_in;
					}
					else
					{
						this._FK_Slot_SlotInformation_in = default(int);
					}
					this.SendPropertyChanged("Slot");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Trainer")]
	public partial class Trainer : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _TrainerID_in;
		
		private int _FK_Activity_Trainer_in;
		
		private int _FK_UserAccount_Trainer_in;
		
		private EntitySet<Slot> _Slots;
		
		private EntityRef<Activity> _Activity;
		
		private EntityRef<UserAccount> _UserAccount;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnTrainerID_inChanging(int value);
    partial void OnTrainerID_inChanged();
    partial void OnFK_Activity_Trainer_inChanging(int value);
    partial void OnFK_Activity_Trainer_inChanged();
    partial void OnFK_UserAccount_Trainer_inChanging(int value);
    partial void OnFK_UserAccount_Trainer_inChanged();
    #endregion
		
		public Trainer()
		{
			this._Slots = new EntitySet<Slot>(new Action<Slot>(this.attach_Slots), new Action<Slot>(this.detach_Slots));
			this._Activity = default(EntityRef<Activity>);
			this._UserAccount = default(EntityRef<UserAccount>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_TrainerID_in", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int TrainerID_in
		{
			get
			{
				return this._TrainerID_in;
			}
			set
			{
				if ((this._TrainerID_in != value))
				{
					this.OnTrainerID_inChanging(value);
					this.SendPropertyChanging();
					this._TrainerID_in = value;
					this.SendPropertyChanged("TrainerID_in");
					this.OnTrainerID_inChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_FK_Activity_Trainer_in", DbType="Int NOT NULL")]
		public int FK_Activity_Trainer_in
		{
			get
			{
				return this._FK_Activity_Trainer_in;
			}
			set
			{
				if ((this._FK_Activity_Trainer_in != value))
				{
					if (this._Activity.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnFK_Activity_Trainer_inChanging(value);
					this.SendPropertyChanging();
					this._FK_Activity_Trainer_in = value;
					this.SendPropertyChanged("FK_Activity_Trainer_in");
					this.OnFK_Activity_Trainer_inChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_FK_UserAccount_Trainer_in", DbType="Int NOT NULL")]
		public int FK_UserAccount_Trainer_in
		{
			get
			{
				return this._FK_UserAccount_Trainer_in;
			}
			set
			{
				if ((this._FK_UserAccount_Trainer_in != value))
				{
					if (this._UserAccount.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnFK_UserAccount_Trainer_inChanging(value);
					this.SendPropertyChanging();
					this._FK_UserAccount_Trainer_in = value;
					this.SendPropertyChanged("FK_UserAccount_Trainer_in");
					this.OnFK_UserAccount_Trainer_inChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Trainer_Slot", Storage="_Slots", ThisKey="TrainerID_in", OtherKey="FK_Trainer_Slot_in")]
		public EntitySet<Slot> Slots
		{
			get
			{
				return this._Slots;
			}
			set
			{
				this._Slots.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Activity_Trainer", Storage="_Activity", ThisKey="FK_Activity_Trainer_in", OtherKey="ActivityID_in", IsForeignKey=true)]
		public Activity Activity
		{
			get
			{
				return this._Activity.Entity;
			}
			set
			{
				Activity previousValue = this._Activity.Entity;
				if (((previousValue != value) 
							|| (this._Activity.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Activity.Entity = null;
						previousValue.Trainers.Remove(this);
					}
					this._Activity.Entity = value;
					if ((value != null))
					{
						value.Trainers.Add(this);
						this._FK_Activity_Trainer_in = value.ActivityID_in;
					}
					else
					{
						this._FK_Activity_Trainer_in = default(int);
					}
					this.SendPropertyChanged("Activity");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="UserAccount_Trainer", Storage="_UserAccount", ThisKey="FK_UserAccount_Trainer_in", OtherKey="UserAccountID_in", IsForeignKey=true)]
		public UserAccount UserAccount
		{
			get
			{
				return this._UserAccount.Entity;
			}
			set
			{
				UserAccount previousValue = this._UserAccount.Entity;
				if (((previousValue != value) 
							|| (this._UserAccount.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._UserAccount.Entity = null;
						previousValue.Trainers.Remove(this);
					}
					this._UserAccount.Entity = value;
					if ((value != null))
					{
						value.Trainers.Add(this);
						this._FK_UserAccount_Trainer_in = value.UserAccountID_in;
					}
					else
					{
						this._FK_UserAccount_Trainer_in = default(int);
					}
					this.SendPropertyChanged("UserAccount");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_Slots(Slot entity)
		{
			this.SendPropertyChanging();
			entity.Trainer = this;
		}
		
		private void detach_Slots(Slot entity)
		{
			this.SendPropertyChanging();
			entity.Trainer = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.UserAccount")]
	public partial class UserAccount : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _UserAccountID_in;
		
		private string _UserName_vc;
		
		private string _Password_vc;
		
		private string _FirstName_vc;
		
		private string _LastName_vc;
		
		private string _Address_vc;
		
		private string _PhoneNumber_vc;
		
		private string _EmailId_vc;
		
		private System.Nullable<System.DateTime> _DOB_date;
		
		private string _SSN_vc;
		
		private System.Nullable<int> _FK_UserType_UserAccount_in;
		
		private EntitySet<Member> _Members;
		
		private EntitySet<Trainer> _Trainers;
		
		private EntityRef<UserType> _UserType;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnUserAccountID_inChanging(int value);
    partial void OnUserAccountID_inChanged();
    partial void OnUserName_vcChanging(string value);
    partial void OnUserName_vcChanged();
    partial void OnPassword_vcChanging(string value);
    partial void OnPassword_vcChanged();
    partial void OnFirstName_vcChanging(string value);
    partial void OnFirstName_vcChanged();
    partial void OnLastName_vcChanging(string value);
    partial void OnLastName_vcChanged();
    partial void OnAddress_vcChanging(string value);
    partial void OnAddress_vcChanged();
    partial void OnPhoneNumber_vcChanging(string value);
    partial void OnPhoneNumber_vcChanged();
    partial void OnEmailId_vcChanging(string value);
    partial void OnEmailId_vcChanged();
    partial void OnDOB_dateChanging(System.Nullable<System.DateTime> value);
    partial void OnDOB_dateChanged();
    partial void OnSSN_vcChanging(string value);
    partial void OnSSN_vcChanged();
    partial void OnFK_UserType_UserAccount_inChanging(System.Nullable<int> value);
    partial void OnFK_UserType_UserAccount_inChanged();
    #endregion
		
		public UserAccount()
		{
			this._Members = new EntitySet<Member>(new Action<Member>(this.attach_Members), new Action<Member>(this.detach_Members));
			this._Trainers = new EntitySet<Trainer>(new Action<Trainer>(this.attach_Trainers), new Action<Trainer>(this.detach_Trainers));
			this._UserType = default(EntityRef<UserType>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_UserAccountID_in", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int UserAccountID_in
		{
			get
			{
				return this._UserAccountID_in;
			}
			set
			{
				if ((this._UserAccountID_in != value))
				{
					this.OnUserAccountID_inChanging(value);
					this.SendPropertyChanging();
					this._UserAccountID_in = value;
					this.SendPropertyChanged("UserAccountID_in");
					this.OnUserAccountID_inChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_UserName_vc", DbType="VarChar(100) NOT NULL", CanBeNull=false)]
		public string UserName_vc
		{
			get
			{
				return this._UserName_vc;
			}
			set
			{
				if ((this._UserName_vc != value))
				{
					this.OnUserName_vcChanging(value);
					this.SendPropertyChanging();
					this._UserName_vc = value;
					this.SendPropertyChanged("UserName_vc");
					this.OnUserName_vcChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Password_vc", DbType="VarChar(MAX) NOT NULL", CanBeNull=false)]
		public string Password_vc
		{
			get
			{
				return this._Password_vc;
			}
			set
			{
				if ((this._Password_vc != value))
				{
					this.OnPassword_vcChanging(value);
					this.SendPropertyChanging();
					this._Password_vc = value;
					this.SendPropertyChanged("Password_vc");
					this.OnPassword_vcChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_FirstName_vc", DbType="VarChar(100) NOT NULL", CanBeNull=false)]
		public string FirstName_vc
		{
			get
			{
				return this._FirstName_vc;
			}
			set
			{
				if ((this._FirstName_vc != value))
				{
					this.OnFirstName_vcChanging(value);
					this.SendPropertyChanging();
					this._FirstName_vc = value;
					this.SendPropertyChanged("FirstName_vc");
					this.OnFirstName_vcChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_LastName_vc", DbType="VarChar(100) NOT NULL", CanBeNull=false)]
		public string LastName_vc
		{
			get
			{
				return this._LastName_vc;
			}
			set
			{
				if ((this._LastName_vc != value))
				{
					this.OnLastName_vcChanging(value);
					this.SendPropertyChanging();
					this._LastName_vc = value;
					this.SendPropertyChanged("LastName_vc");
					this.OnLastName_vcChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Address_vc", DbType="VarChar(100)")]
		public string Address_vc
		{
			get
			{
				return this._Address_vc;
			}
			set
			{
				if ((this._Address_vc != value))
				{
					this.OnAddress_vcChanging(value);
					this.SendPropertyChanging();
					this._Address_vc = value;
					this.SendPropertyChanged("Address_vc");
					this.OnAddress_vcChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_PhoneNumber_vc", DbType="VarChar(20)")]
		public string PhoneNumber_vc
		{
			get
			{
				return this._PhoneNumber_vc;
			}
			set
			{
				if ((this._PhoneNumber_vc != value))
				{
					this.OnPhoneNumber_vcChanging(value);
					this.SendPropertyChanging();
					this._PhoneNumber_vc = value;
					this.SendPropertyChanged("PhoneNumber_vc");
					this.OnPhoneNumber_vcChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_EmailId_vc", DbType="VarChar(100)")]
		public string EmailId_vc
		{
			get
			{
				return this._EmailId_vc;
			}
			set
			{
				if ((this._EmailId_vc != value))
				{
					this.OnEmailId_vcChanging(value);
					this.SendPropertyChanging();
					this._EmailId_vc = value;
					this.SendPropertyChanged("EmailId_vc");
					this.OnEmailId_vcChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_DOB_date", DbType="Date")]
		public System.Nullable<System.DateTime> DOB_date
		{
			get
			{
				return this._DOB_date;
			}
			set
			{
				if ((this._DOB_date != value))
				{
					this.OnDOB_dateChanging(value);
					this.SendPropertyChanging();
					this._DOB_date = value;
					this.SendPropertyChanged("DOB_date");
					this.OnDOB_dateChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_SSN_vc", DbType="VarChar(20)")]
		public string SSN_vc
		{
			get
			{
				return this._SSN_vc;
			}
			set
			{
				if ((this._SSN_vc != value))
				{
					this.OnSSN_vcChanging(value);
					this.SendPropertyChanging();
					this._SSN_vc = value;
					this.SendPropertyChanged("SSN_vc");
					this.OnSSN_vcChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_FK_UserType_UserAccount_in", DbType="Int")]
		public System.Nullable<int> FK_UserType_UserAccount_in
		{
			get
			{
				return this._FK_UserType_UserAccount_in;
			}
			set
			{
				if ((this._FK_UserType_UserAccount_in != value))
				{
					if (this._UserType.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnFK_UserType_UserAccount_inChanging(value);
					this.SendPropertyChanging();
					this._FK_UserType_UserAccount_in = value;
					this.SendPropertyChanged("FK_UserType_UserAccount_in");
					this.OnFK_UserType_UserAccount_inChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="UserAccount_Member", Storage="_Members", ThisKey="UserAccountID_in", OtherKey="FK_UserAccount_Member_in")]
		public EntitySet<Member> Members
		{
			get
			{
				return this._Members;
			}
			set
			{
				this._Members.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="UserAccount_Trainer", Storage="_Trainers", ThisKey="UserAccountID_in", OtherKey="FK_UserAccount_Trainer_in")]
		public EntitySet<Trainer> Trainers
		{
			get
			{
				return this._Trainers;
			}
			set
			{
				this._Trainers.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="UserType_UserAccount", Storage="_UserType", ThisKey="FK_UserType_UserAccount_in", OtherKey="UserTypeID_in", IsForeignKey=true)]
		public UserType UserType
		{
			get
			{
				return this._UserType.Entity;
			}
			set
			{
				UserType previousValue = this._UserType.Entity;
				if (((previousValue != value) 
							|| (this._UserType.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._UserType.Entity = null;
						previousValue.UserAccounts.Remove(this);
					}
					this._UserType.Entity = value;
					if ((value != null))
					{
						value.UserAccounts.Add(this);
						this._FK_UserType_UserAccount_in = value.UserTypeID_in;
					}
					else
					{
						this._FK_UserType_UserAccount_in = default(Nullable<int>);
					}
					this.SendPropertyChanged("UserType");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_Members(Member entity)
		{
			this.SendPropertyChanging();
			entity.UserAccount = this;
		}
		
		private void detach_Members(Member entity)
		{
			this.SendPropertyChanging();
			entity.UserAccount = null;
		}
		
		private void attach_Trainers(Trainer entity)
		{
			this.SendPropertyChanging();
			entity.UserAccount = this;
		}
		
		private void detach_Trainers(Trainer entity)
		{
			this.SendPropertyChanging();
			entity.UserAccount = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.UserType")]
	public partial class UserType : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _UserTypeID_in;
		
		private string _UserType_vc;
		
		private EntitySet<UserAccount> _UserAccounts;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnUserTypeID_inChanging(int value);
    partial void OnUserTypeID_inChanged();
    partial void OnUserType_vcChanging(string value);
    partial void OnUserType_vcChanged();
    #endregion
		
		public UserType()
		{
			this._UserAccounts = new EntitySet<UserAccount>(new Action<UserAccount>(this.attach_UserAccounts), new Action<UserAccount>(this.detach_UserAccounts));
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_UserTypeID_in", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int UserTypeID_in
		{
			get
			{
				return this._UserTypeID_in;
			}
			set
			{
				if ((this._UserTypeID_in != value))
				{
					this.OnUserTypeID_inChanging(value);
					this.SendPropertyChanging();
					this._UserTypeID_in = value;
					this.SendPropertyChanged("UserTypeID_in");
					this.OnUserTypeID_inChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_UserType_vc", DbType="VarChar(20) NOT NULL", CanBeNull=false)]
		public string UserType_vc
		{
			get
			{
				return this._UserType_vc;
			}
			set
			{
				if ((this._UserType_vc != value))
				{
					this.OnUserType_vcChanging(value);
					this.SendPropertyChanging();
					this._UserType_vc = value;
					this.SendPropertyChanged("UserType_vc");
					this.OnUserType_vcChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="UserType_UserAccount", Storage="_UserAccounts", ThisKey="UserTypeID_in", OtherKey="FK_UserType_UserAccount_in")]
		public EntitySet<UserAccount> UserAccounts
		{
			get
			{
				return this._UserAccounts;
			}
			set
			{
				this._UserAccounts.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_UserAccounts(UserAccount entity)
		{
			this.SendPropertyChanging();
			entity.UserType = this;
		}
		
		private void detach_UserAccounts(UserAccount entity)
		{
			this.SendPropertyChanging();
			entity.UserType = null;
		}
	}
}
#pragma warning restore 1591
